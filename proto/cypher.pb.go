// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cypher.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CypherRequest struct {
	Options              *CypherOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Id                   string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CypherRequest) Reset()         { *m = CypherRequest{} }
func (m *CypherRequest) String() string { return proto.CompactTextString(m) }
func (*CypherRequest) ProtoMessage()    {}
func (*CypherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8864f2ab06d5977, []int{0}
}

func (m *CypherRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CypherRequest.Unmarshal(m, b)
}
func (m *CypherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CypherRequest.Marshal(b, m, deterministic)
}
func (m *CypherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CypherRequest.Merge(m, src)
}
func (m *CypherRequest) XXX_Size() int {
	return xxx_messageInfo_CypherRequest.Size(m)
}
func (m *CypherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CypherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CypherRequest proto.InternalMessageInfo

func (m *CypherRequest) GetOptions() *CypherOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *CypherRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CypherResponse struct {
	EncrypedText         string         `protobuf:"bytes,1,opt,name=encrypedText,proto3" json:"encrypedText,omitempty"`
	Options              *CypherOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CypherResponse) Reset()         { *m = CypherResponse{} }
func (m *CypherResponse) String() string { return proto.CompactTextString(m) }
func (*CypherResponse) ProtoMessage()    {}
func (*CypherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8864f2ab06d5977, []int{1}
}

func (m *CypherResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CypherResponse.Unmarshal(m, b)
}
func (m *CypherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CypherResponse.Marshal(b, m, deterministic)
}
func (m *CypherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CypherResponse.Merge(m, src)
}
func (m *CypherResponse) XXX_Size() int {
	return xxx_messageInfo_CypherResponse.Size(m)
}
func (m *CypherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CypherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CypherResponse proto.InternalMessageInfo

func (m *CypherResponse) GetEncrypedText() string {
	if m != nil {
		return m.EncrypedText
	}
	return ""
}

func (m *CypherResponse) GetOptions() *CypherOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type CypherOptions struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Shift                int32    `protobuf:"varint,2,opt,name=shift,proto3" json:"shift,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CypherOptions) Reset()         { *m = CypherOptions{} }
func (m *CypherOptions) String() string { return proto.CompactTextString(m) }
func (*CypherOptions) ProtoMessage()    {}
func (*CypherOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8864f2ab06d5977, []int{2}
}

func (m *CypherOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CypherOptions.Unmarshal(m, b)
}
func (m *CypherOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CypherOptions.Marshal(b, m, deterministic)
}
func (m *CypherOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CypherOptions.Merge(m, src)
}
func (m *CypherOptions) XXX_Size() int {
	return xxx_messageInfo_CypherOptions.Size(m)
}
func (m *CypherOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CypherOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CypherOptions proto.InternalMessageInfo

func (m *CypherOptions) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CypherOptions) GetShift() int32 {
	if m != nil {
		return m.Shift
	}
	return 0
}

func init() {
	proto.RegisterType((*CypherRequest)(nil), "cypher.CypherRequest")
	proto.RegisterType((*CypherResponse)(nil), "cypher.CypherResponse")
	proto.RegisterType((*CypherOptions)(nil), "cypher.CypherOptions")
}

func init() { proto.RegisterFile("cypher.proto", fileDescriptor_c8864f2ab06d5977) }

var fileDescriptor_c8864f2ab06d5977 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xbd, 0x4f, 0x83, 0x21,
	0x10, 0xc6, 0x03, 0xf1, 0xa5, 0xe9, 0x59, 0x3b, 0x5c, 0xd4, 0x34, 0x4e, 0x0d, 0x53, 0xa7, 0x9a,
	0xd4, 0xa1, 0x71, 0xf5, 0x63, 0xd6, 0xa0, 0x93, 0xa3, 0x70, 0xa6, 0x2c, 0x80, 0x80, 0xc6, 0x8e,
	0xfe, 0xe7, 0x26, 0x7c, 0x44, 0x7d, 0x27, 0xe3, 0xc4, 0x7d, 0x3d, 0xbf, 0x07, 0x38, 0x98, 0xe9,
	0x7d, 0xd8, 0x51, 0x5c, 0x87, 0xe8, 0xb3, 0x47, 0x51, 0x33, 0x79, 0x0f, 0x47, 0xd7, 0x25, 0x52,
	0xf4, 0xfa, 0x46, 0x29, 0xe3, 0x39, 0x4c, 0x7c, 0xc8, 0xd6, 0xbb, 0xb4, 0x60, 0x4b, 0xb6, 0x3a,
	0xdc, 0x9c, 0xac, 0x9b, 0xb0, 0xce, 0xdd, 0xd5, 0xa6, 0xea, 0x53, 0x38, 0x07, 0x6e, 0xcd, 0x82,
	0x2f, 0xd9, 0x6a, 0xaa, 0xb8, 0x35, 0x92, 0x60, 0xde, 0x89, 0x29, 0x78, 0x97, 0x08, 0x25, 0xcc,
	0xc8, 0xe9, 0xb8, 0x0f, 0x64, 0x1e, 0xe9, 0x23, 0x17, 0xee, 0x54, 0xfd, 0xaa, 0xfd, 0xb4, 0xe5,
	0x7f, 0xb1, 0x95, 0x97, 0xfd, 0xe2, 0xad, 0x83, 0x08, 0x07, 0xf9, 0x9b, 0x5e, 0x62, 0x3c, 0x86,
	0x21, 0xed, 0xec, 0x4b, 0x2e, 0xcc, 0x41, 0xd5, 0x64, 0xf3, 0xc9, 0xba, 0xf6, 0x81, 0xe2, 0xbb,
	0xd5, 0x84, 0x5b, 0x10, 0xb7, 0x4e, 0x7b, 0x43, 0x38, 0xb2, 0x6d, 0xbf, 0x72, 0x76, 0x3a, 0x2e,
	0xb7, 0xa7, 0x6d, 0x41, 0xdc, 0xd0, 0x3f, 0x84, 0x57, 0x93, 0xa7, 0xa1, 0x2c, 0xe2, 0x59, 0x94,
	0xe3, 0xe2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x89, 0x24, 0x0f, 0xb8, 0x9f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CypherServiceClient is the client API for CypherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CypherServiceClient interface {
	Encode(ctx context.Context, in *CypherRequest, opts ...grpc.CallOption) (*CypherResponse, error)
	Decode(ctx context.Context, in *CypherRequest, opts ...grpc.CallOption) (*CypherResponse, error)
}

type cypherServiceClient struct {
	cc *grpc.ClientConn
}

func NewCypherServiceClient(cc *grpc.ClientConn) CypherServiceClient {
	return &cypherServiceClient{cc}
}

func (c *cypherServiceClient) Encode(ctx context.Context, in *CypherRequest, opts ...grpc.CallOption) (*CypherResponse, error) {
	out := new(CypherResponse)
	err := c.cc.Invoke(ctx, "/cypher.CypherService/Encode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cypherServiceClient) Decode(ctx context.Context, in *CypherRequest, opts ...grpc.CallOption) (*CypherResponse, error) {
	out := new(CypherResponse)
	err := c.cc.Invoke(ctx, "/cypher.CypherService/Decode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CypherServiceServer is the server API for CypherService service.
type CypherServiceServer interface {
	Encode(context.Context, *CypherRequest) (*CypherResponse, error)
	Decode(context.Context, *CypherRequest) (*CypherResponse, error)
}

func RegisterCypherServiceServer(s *grpc.Server, srv CypherServiceServer) {
	s.RegisterService(&_CypherService_serviceDesc, srv)
}

func _CypherService_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CypherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CypherServiceServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cypher.CypherService/Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CypherServiceServer).Encode(ctx, req.(*CypherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CypherService_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CypherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CypherServiceServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cypher.CypherService/Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CypherServiceServer).Decode(ctx, req.(*CypherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CypherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cypher.CypherService",
	HandlerType: (*CypherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _CypherService_Encode_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _CypherService_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cypher.proto",
}
